{"version":3,"sources":["actions/fetchMemes.js","actions/auth.js","actions/deleteMeme.js","components/MemeCards.js","actions/upvote.js","actions/downvote.js","actions/postMeme.js","components/PostMeme.js","components/Profile.js","components/LoginForm.js","actions/login.js","components/RegisterForm.js","actions/register.js","actions/deleteComment.js","components/MemeDetail.js","actions/comment.js","App.js","serviceWorker.js","reducers/fetchMemesReducer.js","reducers/postMemeReducer.js","reducers/upvoteReducer.js","reducers/downvoteReducer.js","reducers/authReducer.js","reducers/RegisterReducer.js","reducers/LoginReducer.js","reducers/CommentReducer.js","reducers/DeleteCommentReducer.js","reducers/MemeDeletionReducer.js","reducers/index.js","index.js"],"names":["fetchMemes","dispatch","axios","get","then","response","type","payload","data","notlogged","checkAuth","token","headers","Authorization","result","status","Data","username","catch","err","console","log","deleted_type","not_delete_type","connect","state","memesData","memes","isLoading","auth","upvoteMeme","e","id","target","getAttribute","Cookies","post","res","parseInt","downvoteMeme","deleteMeme","meme_id","delete","useEffect","cookie","history","useHistory","upvote","push","downvote","clickToDeleteMeme","map","meme","index","className","key","name","_id","alt","src","image","upvoted_users","includes","data-id","onClick","role","aria-label","style","textShadow","color","data-toggle","data-target","upvotes","downvoted_users","downvotes","padding","author","marginLeft","newMeme","isLogged","isLogged_Main","postMeme","form_data","FormData","isPosted","onSubmit","event","preventDefault","placeholder","to","pathname","error","remind_to_login","remove","path","window","location","reload","isLoggedin","login","user","attempt","useLocation","goBack","fontStyle","textAlign","email","document","getElementById","value","password","set","arg","htmlFor","isRegistered","register","delete_comment_type","not_delete_comment_type","firstElementChild","display","focus","onBlur","length","getElementsByClassName","i","posted","comment","failure","error_msg","comment_deleted","comment_deletion","postComment","message","post_comment","deleteComment","comment_id","dispacth","delete_comment","match","innerText","submitComment","params","clickToDelteComment","toString","description","date","slice","onChange","comments","commenter","float","tabIndex","data-commentid","data-memeid","fontSize","content","App","exitButton","hiddenForm","href","flexDirection","component","RegisterForm","LoginForm","PostMeme","exact","MemeDetail","MemeCards","borderTop","Component","Boolean","hostname","initialState","fetchMemesReducer","action","postMemeReducer","isUpvoted","upVotes","upvoteReducer","isDownvoted","downVotes","downvoteReducer","authReducer","RegisterReducer","LoginReducer","CommentReducer","DeleteCommentReducer","meme_deleted","MemeDeletionReducer","rootReducer","combineReducers","postmeme","upvotememe","downvotememe","meme_deletion","defaults","baseURL","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4384a12.chunk.js","sourcesContent":["import axios from 'axios'\r\nexport const GET_MEMES = 'GET_MEMES';\r\n\r\n//This is action creator\r\nexport const getMemes = memes => ({\r\n    type: GET_MEMES,\r\n    payload: memes\r\n})\r\n\r\n\r\nexport const fetchMemes = () => dispatch => {\r\n    axios.get('/memes').then(response => dispatch(getMemes(response.data)))\r\n}","import axios from \"axios\";\r\nexport const LOGGEDIN = \"LOGGEDIN\";\r\nexport const NOTLOGGEDIN = \"NOTLOGGEDIN\";\r\n\r\nexport const logged = (arg) => ({\r\n  type: LOGGEDIN,\r\n  payload: arg,\r\n});\r\nexport const notlogged = () => ({\r\n  type: NOTLOGGEDIN,\r\n});\r\n\r\nexport const checkAuth = (token) => (dispatch) => {\r\n  axios\r\n    .get(\"http://localhost:3000/user/checkauth\", {\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    })\r\n    .then((result) => {\r\n      // console.log(result.data.Data);\r\n      if (result.status === 200) {\r\n        dispatch(logged(result.data.Data.username));\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      if (err) {\r\n        console.log(\"Auth Error \");\r\n        throw err;\r\n      }\r\n      dispatch(notlogged);\r\n    });\r\n};\r\n","import axios from \"axios\";\r\nimport { Cookies } from \"react-cookie\";\r\n\r\nexport const MEME_DELETED = \"MEME_DELETED\";\r\nexport const MEME_NOT_DELETED = \"MEME_NOT_DELETED\";\r\n\r\nexport const deleted_type = {\r\n  type: MEME_DELETED,\r\n};\r\nexport const not_delete_type = {\r\n  type: MEME_NOT_DELETED,\r\n};\r\n\r\nexport const deleteMeme = (meme_id) => (dispatch) => {\r\n  const cookie = new Cookies();\r\n  const token = cookie.get(\"token\");\r\n  axios\r\n    .delete(`http://localhost:3000/memes/${meme_id}`, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    })\r\n    .then((res) => dispatch(deleted_type))\r\n    .catch((err) => {\r\n      if (err) dispatch(not_delete_type);\r\n    });\r\n};\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport { useHistory} from \"react-router-dom\";\r\nimport { fetchMemes } from \"../actions/fetchMemes\";\r\nimport { upvoteMeme } from \"../actions/upvote\";\r\nimport { downvoteMeme } from \"../actions/downvote\";\r\nimport { connect } from \"react-redux\";\r\nimport { Cookies } from \"react-cookie\";\r\nimport { checkAuth } from \"../actions/auth\";\r\nimport {deleteMeme} from '../actions/deleteMeme'\r\n\r\nconst MemeCards = ({\r\n  dispatch,\r\n  checkAuth,\r\n  memesData,\r\n  isLoading,\r\n  fetchMemes,\r\n  upvoteMeme,\r\n  downvoteMeme,\r\n  username,\r\n  deleteMeme\r\n}) => {\r\n  //HERE!! MUst include memesData so that fetchMemes is called everytime DB updated!!\r\n  useEffect(() => {\r\n    fetchMemes();\r\n  }, [memesData, fetchMemes]);\r\n\r\n  //Use Cookies\r\n  let cookie = new Cookies();\r\n  useEffect(() => checkAuth(cookie.get(\"token\")), [cookie.get(\"token\")]);\r\n\r\n  //Use History\r\n  const history = useHistory();\r\n\r\n  //Click Upvote/Downvote Emoji\r\n  const upvote = (e) => {\r\n    if(username === null) {\r\n      history.push('/login')\r\n    }\r\n    upvoteMeme(e);\r\n  };\r\n  const downvote = (e) => {\r\n    downvoteMeme(e);\r\n  };\r\n\r\n  //CLick to delete Meme\r\n  const clickToDeleteMeme = e => {\r\n    let meme_id = e.target.getAttribute('data-id')\r\n    deleteMeme(meme_id)\r\n  }\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      {!isLoading\r\n        ? memesData.map((meme, index) => (\r\n            <div className=\"col-md-4 col-sm-6 col-12\" key={index}>\r\n              <div className=\"card\">\r\n                <div className=\"card-header\">\r\n                  <h5>{meme.name}</h5>\r\n                </div>\r\n                <img\r\n                  id={meme._id}\r\n                  key={index}\r\n                  alt=\"meme-img\"\r\n                  className=\"card-img-top\"\r\n                  src={meme.image}\r\n                />\r\n                <div className=\"card-body\">\r\n                    {/* UPVOTE ICON */}\r\n                    {meme.upvoted_users.includes(username) ? (\r\n                      <Fragment>\r\n                        <span\r\n                          id=\"upvote_icon\"\r\n                          data-id={meme._id}\r\n                          onClick={upvote}\r\n                          role=\"img\"\r\n                          aria-label=\"upvote\"\r\n                          style={{\r\n                            textShadow: \"0 0 0 #d39e00\",\r\n                            color: \"transparent\",\r\n                          }}\r\n                          data-toggle=\"modal\"\r\n                          data-target=\"#myModal\"\r\n                        >\r\n                          👍\r\n                        </span>{\" \"}\r\n                        <span>{meme.upvotes} </span>\r\n                      </Fragment>\r\n                    ) : (\r\n                      <Fragment>\r\n                        <span\r\n                          id=\"upvote_icon\"\r\n                          data-id={meme._id}\r\n                          onClick={upvote}\r\n                          role=\"img\"\r\n                          aria-label=\"upvote\"\r\n                        >\r\n                          👍\r\n                        </span>{\" \"}\r\n                        <span>{meme.upvotes} </span>\r\n                      </Fragment>\r\n                    )}\r\n                    {/* DOWN_VOTE ICON */}\r\n                    {meme.downvoted_users.includes(username) ? (\r\n                      <Fragment>\r\n                        <span\r\n                          id=\"downvote_icon\"\r\n                          data-id={meme._id}\r\n                          role=\"img\"\r\n                          onClick={downvote}\r\n                          aria-label=\"downvote\"\r\n                          style={{\r\n                            textShadow: \"0 0 0 #d39e00\",\r\n                            color: \"transparent\",\r\n                          }}\r\n                        >\r\n                          👎\r\n                        </span>\r\n                        <span>{meme.downvotes} </span>\r\n                      </Fragment>\r\n                    ) : (\r\n                      <Fragment>\r\n                        <span\r\n                          id=\"downvote_icon\"\r\n                          data-id={meme._id}\r\n                          onClick={downvote}\r\n                          role=\"img\"\r\n                          aria-label=\"downvote\"\r\n                        >\r\n                          👎\r\n                        </span>\r\n                        <span>{meme.downvotes} </span>\r\n                      </Fragment>\r\n                    )}\r\n                     <button style={{padding:\"6px\"}} className='btn btn-info' onClick={()=>{\r\n                       history.push(`memes/${meme._id}`)\r\n                     }}>Info</button>\r\n                     {meme.author === username? <button data-id={meme._id} onClick={clickToDeleteMeme} style={{padding:\"6px\",marginLeft:\"6px\"}} className='btn btn-danger'>Delete</button>:null} \r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))\r\n        : null}\r\n\r\n\r\n\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  memesData: state.memes.memesData,\r\n  isLoading: state.memes.isLoading,\r\n  username: state.auth.username,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchMemes: () => dispatch(fetchMemes()),\r\n  upvoteMeme: (e) => dispatch(upvoteMeme(e)),\r\n  downvoteMeme: (e) => dispatch(downvoteMeme(e)),\r\n  checkAuth: (e) => dispatch(checkAuth(e)),\r\n  deleteMeme: meme_id => dispatch(deleteMeme(meme_id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemeCards);\r\n","import axios from \"axios\";\r\nimport { Cookies } from \"react-cookie\";\r\nexport const UPVOTE = \"UPVOTE\";\r\n\r\nexport const upvote_meme = (vote) => ({\r\n  type: UPVOTE,\r\n  payload: vote,\r\n});\r\n\r\nexport const upvoteMeme = (e) => (dispatch) => {\r\n  const id = e.target.getAttribute(\"data-id\");\r\n  const cookie = new Cookies();\r\n  const token = cookie.get(\"token\");\r\n  //BUG FIXED: Must specify NULL for post data\r\n  axios\r\n    .post(`http://localhost:3000/memes/${id}/upvote`,null, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    })\r\n    .then((res) => dispatch(upvote_meme(parseInt(res))));\r\n};\r\n","import axios from 'axios'\r\nimport { Cookies } from \"react-cookie\";\r\n\r\nexport const DOWNVOTE = 'DOWNVOTE'\r\n\r\n\r\nexport const downvote_meme = downvote => ({\r\n    type: DOWNVOTE,\r\n    payload: downvote\r\n})\r\n\r\nexport const downvoteMeme = e => dispatch => {\r\n    const id = e.target.getAttribute('data-id');\r\n    const cookie = new Cookies();\r\n    const token = cookie.get(\"token\");\r\n    axios.post(`http://localhost:3000/memes/${id}/downvote`,null,{\r\n        headers: {\r\n            Authorization: \"Bearer \" + token,\r\n          },\r\n    }).then(res=>dispatch(downvote_meme(parseInt(res))))\r\n}","import axios from \"axios\";\r\nimport { Cookies } from \"react-cookie\";\r\nexport const POST_MEME = \"POST_MEME\";\r\nexport const newMeme = () => ({\r\n  type: POST_MEME,\r\n});\r\n\r\nexport const postMeme = (e) => (dispatch) => {\r\n  const form_data = new FormData(e.target);\r\n  const cookie = new Cookies();\r\n  const token = cookie.get(\"token\");\r\n  axios\r\n    .post(\"http://localhost:3000/memes\", form_data, {\r\n      headers: {\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    })\r\n    .then(() => dispatch(newMeme));\r\n};\r\n","import React, { useEffect, Fragment } from \"react\";\r\nimport \"../stylesheet/postmeme.css\";\r\nimport { useHistory, Redirect } from \"react-router-dom\";\r\nimport { postMeme } from \"../actions/postMeme\";\r\nimport { connect } from \"react-redux\";\r\nimport { checkAuth } from \"../actions/auth\";\r\nimport { Cookies } from \"react-cookie\";\r\n\r\n\r\nconst PostMeme = ({ postMeme, isPosted, isLogged, username, checkAuth }) => {\r\n  //Check if logged\r\n  let cookie = new Cookies();\r\n  useEffect(() => checkAuth(cookie.get(\"token\")), [cookie, checkAuth]);\r\n  const history = useHistory();\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    // dispatch(postMeme(event));\r\n    postMeme(event);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div id='post_meme_form'>\r\n      {!isLogged ? (\r\n        <Fragment>\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { error: \"Please sign in before posting memes\", remind_to_login: true },\r\n            }}\r\n          />\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n      <h3>POST MEME</h3>\r\n          <form  onSubmit={onSubmit}>\r\n            <input className=\"d-block\" placeholder=\"Name\" name=\"name\" />\r\n            <input className=\"d-block\" placeholder=\"Meme URL\" name=\"image\" />\r\n            <textarea\r\n              className=\"d-block\"\r\n              placeholder=\"Description\"\r\n              name=\"description\"\r\n            />\r\n            <button className=\"btn btn-primary\">Submit</button>\r\n          </form>\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  isLogged: state.auth.isLogged_Main,\r\n  username: state.auth.username,\r\n});\r\n\r\nconst mapDispatchtoProps = (dispatch) => ({\r\n  postMeme: (e) => dispatch(postMeme(e)),\r\n  checkAuth: (e) => dispatch(checkAuth(e)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchtoProps)(PostMeme);\r\n","import React, { useEffect, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import {checkAuth} from '../actions/auth'\r\nimport { checkAuth, notlogged } from \"../actions/auth\";\r\nimport { connect } from \"react-redux\";\r\nimport { Cookies } from \"react-cookie\";\r\n\r\nconst Profile = ({ dispatch, isLogged, username }) => {\r\n  let cookie = new Cookies();\r\n  useEffect(() => dispatch(checkAuth(cookie.get(\"token\"))), [dispatch, cookie]);\r\n  //Click to sign out\r\n  const onClick = () => {\r\n    cookie.remove(\"token\", { path: \"/\" });\r\n    dispatch(notlogged);\r\n    window.location.reload();\r\n  };\r\n  //\r\n  return (\r\n    <div id=\"user_buttons\">\r\n      {!isLogged ? (\r\n        <Fragment>\r\n          <Link to=\"/register\">\r\n            <button className=\"btn btn-danger\">Register</button>\r\n          </Link>\r\n          <Link to=\"/login\">\r\n            <button className=\"btn btn-success\">Login</button>\r\n          </Link>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n                    <button className=\"btn btn-warning\" onClick={onClick}>\r\n            Logout\r\n          </button>\r\n          <span>Hello, {username}</span>\r\n\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLogged: state.auth.isLogged_Main,\r\n  username: state.auth.username,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Profile);\r\n","import React, { useEffect, Fragment } from \"react\";\r\nimport { log_in } from \"../actions/login\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\n\r\nconst LoginForm = ({ dispatch, isLoggedin, user, attempt }) => {\r\n  const location = useLocation();\r\n\r\n  let history = useHistory();\r\n\r\n  //Handle success/fail login\r\n  useEffect(() => {\r\n    if (isLoggedin) {\r\n      // history.push(\"/\");\r\n      history.goBack()\r\n    } else {\r\n      if (attempt) {\r\n        history.push({\r\n          pathname: \"/login\",\r\n        });\r\n      }\r\n    }\r\n  }, [isLoggedin, attempt,history]);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(log_in());\r\n  };\r\n  return (\r\n    <div id=\"login_form\">\r\n      {/* Notify to login before post */}\r\n      {location.state && location.state.remind_to_login ? (\r\n        <p style={{ color: \"red\", fontStyle: \"italic\" }}>\r\n          {location.state.error}\r\n        </p>\r\n      ) : null}\r\n\r\n      {/* Wrong credential */}\r\n      {attempt ? (\r\n        <Fragment>\r\n          <p style={{ color: \"red\", fontStyle: \"italic\" }}>\r\n          Incorrect password/email\r\n          </p>{\" \"}\r\n        </Fragment>\r\n      ) : null}\r\n      <h3 style={{ textAlign: \"center\" }}>Login</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <label htmlFor=\"email\">Email: </label>\r\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\r\n        <label htmlFor=\"password\">Passowrd: </label>\r\n        <input id=\"password\" name=\"password\" placeholder=\"Password\" />\r\n        <Link to=\"/register\">\r\n          <p>Don't have an account yet?</p>\r\n        </Link>\r\n        <button className=\"btn btn-primary\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  isLoggedin: state.login.isLogged,\r\n  user: state.login.user,\r\n  attempt: state.login.attempt,\r\n});\r\n\r\nexport default connect(mapStateToProps)(LoginForm);\r\n","import axios from \"axios\";\r\nimport { Cookies } from \"react-cookie\";\r\nexport const LOGGEDIN = \"LOGGEDIN\";\r\nexport const NOT_LOGGEDIN = \"NOT_LOGGEDIN\";\r\n\r\nconst loggin_type = (arg) => ({\r\n  type: LOGGEDIN,\r\n  payload: arg,\r\n});\r\nconst not_logged = (arg) => ({\r\n  type: NOT_LOGGEDIN,\r\n  payload: arg,\r\n});\r\n\r\nexport const log_in = () => (dispatch) => {\r\n  axios\r\n    .post(\"http://localhost:3000/user/login\", {\r\n      email: document.getElementById(\"email\").value,\r\n      password: document.getElementById(\"password\").value,\r\n    })\r\n    .then((res) => {\r\n      let cookie = new Cookies();\r\n      cookie.set(\"token\", res.data.token, { path: \"/\" });\r\n      dispatch(loggin_type(res.data.username));\r\n    //   return new Promise((reslove, reject)=>{\r\n    //     let cookie = new Cookies();\r\n    //     cookie.set(\"token\", res.data.token, { path: \"/\" });\r\n    //     dispatch(loggin_type(res.data.username));\r\n    //     reslove(true)\r\n    //   })\r\n    })\r\n    .catch((err) => {\r\n      if (err) {\r\n        dispatch(not_logged());\r\n      }\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport { register } from \"../actions/register\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst RegisterForm = ({ dispatch, isRegistered, user }) => {\r\n  let history = useHistory();\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    dispatch(register());\r\n    history.push(\"/\");\r\n  };\r\n  return (\r\n    <div id=\"register_form\">\r\n      <h3>Register</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <label htmlFor=\"username\">Username</label>\r\n        <input id=\"username\" name=\"username\" placeholder=\"Username\" />\r\n        <label htmlFor=\"email\">Email</label>\r\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\r\n        <label htmlFor=\"password\">Passowrd</label>\r\n        <input id=\"password\" name=\"password\" placeholder=\"Password\" />\r\n        <Link to=\"/login\">\r\n          <p>Already have an account?</p>\r\n        </Link>\r\n\r\n        <button className=\"btn btn-primary\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  isRegistered: state.register.isRegistered,\r\n  user: state.register.user,\r\n});\r\nexport default connect(mapStateToProps)(RegisterForm);\r\n","import axios from 'axios'\r\n\r\nexport const REGISTERED = 'REGISTERED'\r\nexport const NOT_REGISTER = 'NOT_REGISTER'\r\n\r\nexport const register_type = (user) => ({\r\n    type: REGISTERED,\r\n    payload: user\r\n})\r\nexport const not_register_type = () =>({\r\n    type: NOT_REGISTER\r\n})\r\n\r\nexport const register = () => dispatch => {\r\n    axios.post('http://localhost:3000/user/register', {\r\n        username: document.getElementById('username').value,\r\n        email: document.getElementById('email').value,\r\n        password: document.getElementById('password').value\r\n    })\r\n    .then(result => dispatch(register_type(result.data) ))\r\n}","import axios from 'axios'\r\nimport { Cookies } from \"react-cookie\";\r\n\r\nexport const COMMENT_DELETE = 'COMMENT_DELETE'\r\nexport const COMMENT_DELETE_ERROR = 'COMMENT_DELETE_ERROR'\r\n\r\nexport const delete_comment_type = {\r\n    type: COMMENT_DELETE\r\n}\r\nexport const not_delete_comment_type = {\r\n    type: COMMENT_DELETE_ERROR\r\n}\r\n\r\nexport const delete_comment = (meme_id,comment_id) => dispacth => {\r\n  const cookie = new Cookies();\r\n  const token = cookie.get(\"token\");\r\n\r\n    axios.delete(`http://localhost:3000/memes/${meme_id}/comments/${comment_id}`, {\r\n        headers: {\r\n            Authorization: \"Bearer \" + token,\r\n        }\r\n    })\r\n    .then(res => dispacth(delete_comment_type))\r\n    .catch(err => {\r\n        if(err)\r\n        dispacth(not_delete_comment_type)\r\n    })\r\n}","import React, { useEffect, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchMemes } from \"../actions/fetchMemes\";\r\nimport { post_comment } from \"../actions/comment\";\r\nimport { checkAuth } from \"../actions/auth\";\r\nimport { delete_comment } from \"../actions/deleteComment\";\r\n\r\nconst onClick = (e) => {\r\n  if (e.target.firstElementChild) {\r\n    e.target.firstElementChild.style.display = \"initial\";\r\n    e.target.firstElementChild.focus();\r\n  }\r\n};\r\n//SMART TRICKS - USE ONBLUR TO CLOSE MODALS\r\nconst onBlur = () => {\r\n  let length = document.getElementsByClassName(\"comment_delete_modal\").length;\r\n  for (let i = 0; i < length; i++) {\r\n    document.getElementsByClassName(\"comment_delete_modal\")[i].style.display =\r\n      \"none\";\r\n  }\r\n};\r\n\r\nconst MemeDetail = ({\r\n  memesData,\r\n  fetchMemes,\r\n  username,\r\n  match,\r\n  postComment,\r\n  posted,\r\n  failure,\r\n  error_msg,\r\n  deleteComment,\r\n  comment_deleted,\r\n}) => {\r\n  useEffect(() => {\r\n    fetchMemes();\r\n  }, [memesData, fetchMemes]);\r\n\r\n  //HOOK to Display ERROR\r\n  useEffect(() => {\r\n    if (failure) {\r\n      document.getElementById(\"comment_error\").innerText = error_msg;\r\n    }\r\n    if (username != null && failure)\r\n      document.getElementById(\"comment_error\").innerText = \"\";\r\n\r\n    if (posted) window.location.reload();\r\n  }, [failure, posted, username]);\r\n\r\n  const submitComment = () => {\r\n    const comment = document.getElementById(\"comment_text\").value;\r\n    postComment(comment, match.params.id);\r\n  };\r\n\r\n  //DELETE COMMENT\r\n  const clickToDelteComment = e => {\r\n    const comment_id = e.target.getAttribute('data-commentid');\r\n    const meme_id = e.target.getAttribute('data-memeid');\r\n    deleteComment(meme_id,comment_id);\r\n  }\r\n\r\n  return (\r\n    <div id=\"meme_detail\">\r\n      {memesData.map((meme, index) => {\r\n        if (meme._id.toString() === match.params.id) {\r\n          return (\r\n            <Fragment key={index}>\r\n              <div className=\"col-12 col-sm-8 offset-sm-2\">\r\n                <div className=\"card\">\r\n                  <div className=\"card-header\">\r\n                    <h4>{meme.name}</h4>\r\n                  </div>\r\n                  <img alt=\"meme\" key={index} src={meme.image} />\r\n                  <div className=\"card-body\">\r\n                    <p style={{ fontStyle: \"italic\" }}>\r\n                      Description: &nbsp;\r\n                      {meme.description}\r\n                    </p>\r\n                    <p style={{ fontStyle: \"italic\" }}>\r\n                      Uploader: &nbsp;\r\n                      {meme.author}\r\n                    </p>\r\n                    <p style={{ fontStyle: \"italic\" }}>\r\n                      Date: &nbsp;\r\n                      {meme.date.slice(0, 10)}{\" \"}\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div className=\"card-body\" id=\"comment_section\">\r\n                    <textarea\r\n                      id=\"comment_text\"\r\n                      onChange={() => {\r\n                        document.getElementById(\r\n                          \"comment_button\"\r\n                        ).style.display = \"initial\";\r\n                      }}\r\n                      placeholder=\"..Comment\"\r\n                    ></textarea>{\" \"}\r\n                    <p\r\n                      id=\"comment_error\"\r\n                      style={{ color: \"red\", fontStyle: \"italic\" }}\r\n                    ></p>\r\n                    <input\r\n                      type=\"button\"\r\n                      value=\"Submit\"\r\n                      id=\"comment_button\"\r\n                      onClick={submitComment}\r\n                    />\r\n                    {meme.comments.map((comment, index) => {\r\n                      return (\r\n                        <p key={index}>\r\n                          <span id=\"commenters\">{comment.commenter}</span>{\" \"}\r\n                          <br /> {/* Delete comment */}\r\n                          {/* Conditional render DELETE BUTTON */}\r\n                          {comment.commenter === username ? <Fragment>\r\n                            <span onClick={onClick} style={{ float: \"right\" }}>\r\n                            &#215;\r\n                            <span\r\n                              tabIndex=\"0\"\r\n                              onBlur={onBlur}\r\n                              className=\"comment_delete_modal\"\r\n                              data-commentid={comment._id}\r\n                              data-memeid = {meme._id}\r\n                              onClick={clickToDelteComment}\r\n                            >\r\n                              Delete\r\n                            </span>\r\n                          </span>\r\n                          </Fragment>: null}\r\n                        \r\n                          <span style={{ fontSize: \"0.75rem\" }}>\r\n                            &#x1F550; { comment.date.slice(0, 10)}\r\n                          </span>\r\n                          <br />\r\n                          {comment.content}\r\n                        </p>\r\n                      );\r\n                    })}         \r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </Fragment>\r\n          );\r\n        }\r\n      })}\r\n\r\n      {/* Comment Delete Confirmation */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  memesData: state.memes.memesData,\r\n  isLoading: state.memes.isLoading,\r\n  username: state.auth.username,\r\n  posted: state.comment.posted,\r\n  failure: state.comment.failure,\r\n  error_msg: state.comment.error_msg,\r\n  comment_deleted: state.comment_deletion.comment_deleted,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchMemes: () => dispatch(fetchMemes()),\r\n  checkAuth: (e) => dispatch(checkAuth(e)),\r\n  postComment: (comment, id) => dispatch(post_comment(comment, id)),\r\n  deleteComment: (meme_id, comment_id) =>\r\n    dispatch(delete_comment(meme_id, comment_id)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MemeDetail);\r\n","import axios from \"axios\";\r\nimport { Cookies } from \"react-cookie\";\r\nexport const SUCCESS_COMMENT = \"SUCCESS_COMMENT\";\r\nexport const FALIURE_COMMENT_LOGIN_NEED = \"FALIURE_COMMENT_LOGIN_NEED\";\r\n\r\nexport const comment_success = () => ({\r\n  type: SUCCESS_COMMENT,\r\n});\r\n\r\nexport const comment_failure = (error) => ({\r\n  type: FALIURE_COMMENT_LOGIN_NEED,\r\n  payload: error,\r\n});\r\n\r\nexport const post_comment = (comment, id) => (dispatch) => {\r\n  const cookie = new Cookies();\r\n  const token = cookie.get(\"token\");\r\n  axios\r\n    .post(\r\n      `http://localhost:3000/memes/${id}/comments`,\r\n      { comment: comment },\r\n      {\r\n        headers: {\r\n          Authorization: \"Bearer \" + token,\r\n        },\r\n      }\r\n    )\r\n    .then((res) => dispatch(comment_success()))\r\n    .catch((err) => dispatch(comment_failure(err.message)));\r\n};\r\n","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport MemeCards from \"./components/MemeCards\";\nimport PostMeme from \"./components/PostMeme\";\nimport Profile from \"./components/Profile\";\nimport LoginForm from \"./components/LoginForm\";\nimport RegisterForm from \"./components/RegisterForm\";\nimport MemeDetail from \"./components/MemeDetail\";\n\nclass App extends Component {\n  //Close modal\n  exitButton = () => {\n    document.getElementById(\"contact-form\").style.display = \"none\";\n  };\n  hiddenForm = () => {\n    document.getElementById(\"contact-form\").style.display = \"none\";\n    window.location.reload();\n  };\n  render() {\n    return (\n      <div>\n         <Profile />\n        <div className=\"jumbotron\">\n\n          <a href=\"/\">\n            <img alt=\"LOGO\" src=\"logo.png\" />\n          </a>\n        </div>\n        <div style={{ display:\"flex\", flexDirection:\"row-reverse\"}}>\n            <Link to=\"/postmeme\">\n              <button className=\"btn btn-success\" id=\"addButton\">\n                + Add meme\n              </button>\n            </Link>\n          </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <Switch>\n              <Route path=\"/register\" component={RegisterForm}></Route>\n              <Route path=\"/login\" component={LoginForm}></Route>\n              <Route path=\"/postmeme\" component={PostMeme}></Route>\n              <Route exact path=\"/memes/:id\" component={MemeDetail}></Route>\n            </Switch>\n          </div>\n          <div className=\"row\" style={{ display: \"inherit\" }}>\n            <div className=\"card-deck\">\n              <Switch>\n                <Route exact path=\"/\" component={MemeCards}></Route>\n              </Switch>\n            </div>\n          </div>\n        </div>\n\n        <div style={{borderTop:\"1px solid #0000001a\", textAlign:\"center\"}}>\n        &copy;\t2020 Copyright - Barney Shi\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actions from \"../actions/fetchMemes\";\r\n\r\nconst initialState = {\r\n  memesData: [],\r\n  isLoading: true,\r\n};\r\n\r\nconst fetchMemesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.GET_MEMES:\r\n      return { ...state, isLoading: false, memesData: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default fetchMemesReducer;\r\n","import * as actions from \"../actions/postMeme\";\r\n\r\nconst initialState = {\r\n  isPosted: false\r\n};\r\n\r\nconst postMemeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.POST_MEME:\r\n      return { ...state, isPosted: true};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default postMemeReducer;\r\n","import * as actions from \"../actions/upvote\";\r\n\r\nconst initialState = {\r\n  isUpvoted: false,\r\n  upVotes: 0\r\n};\r\n\r\nconst upvoteReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.UPVOTE:\r\n      return { ...state, isUpvoted: true, upVotes:action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default upvoteReducer;","import * as actions from \"../actions/downvote\";\r\n\r\nconst initialState = {\r\n  isDownvoted: false,\r\n  downVotes: 0\r\n};\r\n\r\nconst downvoteReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.DOWNVOTE:\r\n      return { ...state, isDownvoted: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default downvoteReducer;\r\n","import * as actions from \"../actions/auth\";\r\n\r\nconst initialState = {\r\n  isLogged_Main: false,\r\n  username: null\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.LOGGEDIN:\r\n      return { isLogged_Main: true, username: action.payload };\r\n    case actions.NOTLOGGEDIN:\r\n        return {isLogged_Main: false, user: null}\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n","import * as actions from \"../actions/register\";\r\n\r\nconst initialState = {\r\n  isRegistered: false,\r\n  user: null,\r\n};\r\n\r\nconst RegisterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.REGISTERED:\r\n      return { isRegistered: true, user: action.payload };\r\n    case actions.NOT_REGISTER:\r\n      return { isRegistered: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default RegisterReducer;\r\n","import * as actions from \"../actions/login\";\r\n\r\nconst initialState = {\r\n  isLogged: false,\r\n  username: [],\r\n  attempt: false\r\n};\r\n\r\nconst LoginReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.LOGGEDIN:\r\n      return { isLogged: true};\r\n    case actions.NOT_LOGGEDIN:\r\n      return {isLogged: false, username: null,attempt: true};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default LoginReducer;\r\n","import * as actions from \"../actions/comment\";\r\n\r\nconst initialState = {\r\n  posted: false,\r\n  failure: false,\r\n  error_msg: \"\",\r\n};\r\n\r\nconst CommentReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.SUCCESS_COMMENT:\r\n      return {posted: true, failure: false, error_msg:'123' };\r\n    case actions.FALIURE_COMMENT_LOGIN_NEED:\r\n      return { ...state, failure: true,posted:false,error_msg:'Please sign in to comment' };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default CommentReducer;\r\n","import * as actions from \"../actions/deleteComment\";\r\n\r\nconst initialState = {\r\n  comment_deleted: false,\r\n};\r\n\r\nconst DeleteCommentReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.COMMENT_DELETE:\r\n      return { comment_deleted: true };\r\n    case actions.COMMENT_DELETE_ERROR:\r\n      return { comment_deleted: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default DeleteCommentReducer;\r\n","import * as actions from \"../actions/deleteMeme\";\r\n\r\nconst initialState = {\r\n  meme_deleted: false,\r\n};\r\n\r\nconst MemeDeletionReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actions.MEME_DELETED:\r\n      return { meme_deleted: true };\r\n    case actions.MEME_NOT_DELETED:\r\n      return { meme_deleted: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default MemeDeletionReducer\r\n","import {combineReducers} from 'redux'\r\n\r\nimport fetchMemesReducer from './fetchMemesReducer'\r\nimport postMemeReducer from './postMemeReducer'\r\nimport upvoteReducer from './upvoteReducer'\r\nimport downvoteReducer from './downvoteReducer'\r\nimport authReducer from './authReducer'\r\nimport RegisterReducer from './RegisterReducer'\r\nimport LoginReducer from './LoginReducer'\r\nimport CommentReducer from './CommentReducer'\r\nimport DeleteCommentReducer from './DeleteCommentReducer'\r\nimport MemeDeletionReducer from './MemeDeletionReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    memes: fetchMemesReducer,\r\n    postmeme: postMemeReducer,\r\n    upvotememe: upvoteReducer,\r\n    downvotememe: downvoteReducer,\r\n    auth: authReducer,\r\n    register: RegisterReducer,\r\n    login: LoginReducer,\r\n    comment: CommentReducer,\r\n    comment_deletion: DeleteCommentReducer,\r\n    meme_deletion: MemeDeletionReducer\r\n})\r\n\r\nexport default rootReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers'\nimport axios from 'axios'\n\naxios.defaults.baseURL = 'https://barneyshi.github.io/iMemeDB/';\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename='/iMemeDB/'>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}