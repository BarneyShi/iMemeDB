{"version":3,"sources":["actions/fetchMemes.js","actions/upvote.js","actions/downvote.js","actions/auth.js","actions/deleteMeme.js","components/MemeCards.js","actions/postMeme.js","components/PostMeme.js","components/Profile.js","actions/login.js","components/LoginForm.js","actions/register.js","components/RegisterForm.js","actions/comment.js","actions/deleteComment.js","components/MemeDetail.js","App.js","serviceWorker.js","reducers/fetchMemesReducer.js","reducers/postMemeReducer.js","reducers/upvoteReducer.js","reducers/downvoteReducer.js","reducers/authReducer.js","reducers/RegisterReducer.js","reducers/LoginReducer.js","reducers/CommentReducer.js","reducers/DeleteCommentReducer.js","reducers/MemeDeletionReducer.js","reducers/index.js","index.js"],"names":["GET_MEMES","fetchMemes","dispatch","axios","get","then","response","memes","data","type","payload","UPVOTE","upvoteMeme","e","id","target","getAttribute","token","Cookies","post","headers","Authorization","res","vote","parseInt","DOWNVOTE","downvoteMeme","downvote","LOGGEDIN","NOTLOGGEDIN","notlogged","checkAuth","result","arg","status","Data","username","catch","err","console","log","MEME_DELETED","MEME_NOT_DELETED","deleted_type","not_delete_type","connect","state","memesData","isLoading","auth","deleteMeme","meme_id","delete","useEffect","cookie","history","useHistory","upvote","push","clickToDeleteMeme","map","meme","index","className","key","name","_id","alt","src","image","upvoted_users","includes","data-id","onClick","role","aria-label","style","textShadow","color","data-toggle","data-target","upvotes","downvoted_users","downvotes","padding","author","marginLeft","POST_MEME","newMeme","isLogged","isLogged_Main","postMeme","form_data","FormData","isPosted","onSubmit","event","preventDefault","placeholder","to","pathname","error","remind_to_login","remove","path","window","location","reload","NOT_LOGGEDIN","log_in","email","document","getElementById","value","password","set","isLoggedin","login","user","attempt","useLocation","goBack","fontStyle","textAlign","htmlFor","REGISTERED","NOT_REGISTER","register","isRegistered","SUCCESS_COMMENT","FALIURE_COMMENT_LOGIN_NEED","post_comment","comment","message","COMMENT_DELETE","COMMENT_DELETE_ERROR","delete_comment_type","not_delete_comment_type","firstElementChild","display","focus","onBlur","length","getElementsByClassName","i","posted","failure","error_msg","comment_deleted","comment_deletion","postComment","deleteComment","comment_id","dispacth","delete_comment","match","innerText","submitComment","params","clickToDelteComment","toString","description","date","slice","onChange","comments","commenter","float","tabIndex","data-commentid","data-memeid","fontSize","content","App","exitButton","hiddenForm","href","flexDirection","component","RegisterForm","LoginForm","PostMeme","exact","MemeDetail","MemeCards","borderTop","Component","Boolean","hostname","initialState","fetchMemesReducer","action","actions","postMemeReducer","isUpvoted","upVotes","upvoteReducer","isDownvoted","downVotes","downvoteReducer","authReducer","RegisterReducer","LoginReducer","CommentReducer","DeleteCommentReducer","meme_deleted","MemeDeletionReducer","rootReducer","combineReducers","postmeme","upvotememe","downvotememe","meme_deletion","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24871709.chunk.js","sourcesContent":["import axios from 'axios'\nexport const GET_MEMES = 'GET_MEMES';\n\n//This is action creator\nexport const getMemes = memes => ({\n    type: GET_MEMES,\n    payload: memes\n})\n\n\nexport const fetchMemes = () => dispatch => {\n    axios.get('/memes').then(response => dispatch(getMemes(response.data)))\n}","import axios from \"axios\";\nimport { Cookies } from \"react-cookie\";\nexport const UPVOTE = \"UPVOTE\";\n\nexport const upvote_meme = (vote) => ({\n  type: UPVOTE,\n  payload: vote,\n});\n\nexport const upvoteMeme = (e) => (dispatch) => {\n  const id = e.target.getAttribute(\"data-id\");\n  const cookie = new Cookies();\n  const token = cookie.get(\"token\");\n  //BUG FIXED: Must specify NULL for post data\n  axios\n    .post(`/memes/${id}/upvote`,null, {\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n    .then((res) => dispatch(upvote_meme(parseInt(res))));\n};\n","import axios from 'axios'\nimport { Cookies } from \"react-cookie\";\n\nexport const DOWNVOTE = 'DOWNVOTE'\n\n\nexport const downvote_meme = downvote => ({\n    type: DOWNVOTE,\n    payload: downvote\n})\n\nexport const downvoteMeme = e => dispatch => {\n    const id = e.target.getAttribute('data-id');\n    const cookie = new Cookies();\n    const token = cookie.get(\"token\");\n    axios.post(`/memes/${id}/downvote`,null,{\n        headers: {\n            Authorization: \"Bearer \" + token,\n          },\n    }).then(res=>dispatch(downvote_meme(parseInt(res))))\n}","import axios from \"axios\";\nexport const LOGGEDIN = \"LOGGEDIN\";\nexport const NOTLOGGEDIN = \"NOTLOGGEDIN\";\n\nexport const logged = (arg) => ({\n  type: LOGGEDIN,\n  payload: arg,\n});\nexport const notlogged = () => ({\n  type: NOTLOGGEDIN,\n});\n\nexport const checkAuth = (token) => (dispatch) => {\n  axios\n    .get(\"/user/checkauth\", {\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n    .then((result) => {\n      // console.log(result.data.Data);\n      if (result.status === 200) {\n        dispatch(logged(result.data.Data.username));\n      }\n    })\n    .catch((err) => {\n      if (err) {\n        console.log(\"Auth Error \");\n        throw err;\n      }\n      dispatch(notlogged);\n    });\n};\n","import axios from \"axios\";\nimport { Cookies } from \"react-cookie\";\n\nexport const MEME_DELETED = \"MEME_DELETED\";\nexport const MEME_NOT_DELETED = \"MEME_NOT_DELETED\";\n\nexport const deleted_type = {\n  type: MEME_DELETED,\n};\nexport const not_delete_type = {\n  type: MEME_NOT_DELETED,\n};\n\nexport const deleteMeme = (meme_id) => (dispatch) => {\n  const cookie = new Cookies();\n  const token = cookie.get(\"token\");\n  axios\n    .delete(`/memes/${meme_id}`, {\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n    .then((res) => dispatch(deleted_type))\n    .catch((err) => {\n      if (err) dispatch(not_delete_type);\n    });\n};\n","import React, { Fragment, useEffect } from \"react\";\nimport { useHistory} from \"react-router-dom\";\nimport { fetchMemes } from \"../actions/fetchMemes\";\nimport { upvoteMeme } from \"../actions/upvote\";\nimport { downvoteMeme } from \"../actions/downvote\";\nimport { connect } from \"react-redux\";\nimport { Cookies } from \"react-cookie\";\nimport { checkAuth } from \"../actions/auth\";\nimport {deleteMeme} from '../actions/deleteMeme'\n\nconst MemeCards = ({\n  dispatch,\n  checkAuth,\n  memesData,\n  isLoading,\n  fetchMemes,\n  upvoteMeme,\n  downvoteMeme,\n  username,\n  deleteMeme\n}) => {\n  //HERE!! MUst include memesData so that fetchMemes is called everytime DB updated!!\n  useEffect(() => {\n    fetchMemes();\n  }, [memesData, fetchMemes]);\n\n  //Use Cookies\n  let cookie = new Cookies();\n  useEffect(() => checkAuth(cookie.get(\"token\")), [cookie.get(\"token\")]);\n\n  //Use History\n  const history = useHistory();\n\n  //Click Upvote/Downvote Emoji\n  const upvote = (e) => {\n    if(username === null) {\n      history.push('/login')\n    }\n    upvoteMeme(e);\n  };\n  const downvote = (e) => {\n    downvoteMeme(e);\n  };\n\n  //CLick to delete Meme\n  const clickToDeleteMeme = e => {\n    let meme_id = e.target.getAttribute('data-id')\n    deleteMeme(meme_id)\n  }\n\n\n  return (\n    <Fragment>\n\n      {!isLoading\n        ? memesData.map((meme, index) => (\n            <div className=\"col-md-4 col-sm-6 col-12\" key={index}>\n              <div className=\"card\">\n                <div className=\"card-header\">\n                  <h5>{meme.name}</h5>\n                </div>\n                <img\n                  id={meme._id}\n                  key={index}\n                  alt=\"meme-img\"\n                  className=\"card-img-top\"\n                  src={meme.image}\n                />\n                <div className=\"card-body\">\n                    {/* UPVOTE ICON */}\n                    {meme.upvoted_users.includes(username) ? (\n                      <Fragment>\n                        <span\n                          id=\"upvote_icon\"\n                          data-id={meme._id}\n                          onClick={upvote}\n                          role=\"img\"\n                          aria-label=\"upvote\"\n                          style={{\n                            textShadow: \"0 0 0 #d39e00\",\n                            color: \"transparent\",\n                          }}\n                          data-toggle=\"modal\"\n                          data-target=\"#myModal\"\n                        >\n                          👍\n                        </span>{\" \"}\n                        <span>{meme.upvotes} </span>\n                      </Fragment>\n                    ) : (\n                      <Fragment>\n                        <span\n                          id=\"upvote_icon\"\n                          data-id={meme._id}\n                          onClick={upvote}\n                          role=\"img\"\n                          aria-label=\"upvote\"\n                        >\n                          👍\n                        </span>{\" \"}\n                        <span>{meme.upvotes} </span>\n                      </Fragment>\n                    )}\n                    {/* DOWN_VOTE ICON */}\n                    {meme.downvoted_users.includes(username) ? (\n                      <Fragment>\n                        <span\n                          id=\"downvote_icon\"\n                          data-id={meme._id}\n                          role=\"img\"\n                          onClick={downvote}\n                          aria-label=\"downvote\"\n                          style={{\n                            textShadow: \"0 0 0 #d39e00\",\n                            color: \"transparent\",\n                          }}\n                        >\n                          👎\n                        </span>\n                        <span>{meme.downvotes} </span>\n                      </Fragment>\n                    ) : (\n                      <Fragment>\n                        <span\n                          id=\"downvote_icon\"\n                          data-id={meme._id}\n                          onClick={downvote}\n                          role=\"img\"\n                          aria-label=\"downvote\"\n                        >\n                          👎\n                        </span>\n                        <span>{meme.downvotes} </span>\n                      </Fragment>\n                    )}\n                     <button style={{padding:\"6px\"}} className='btn btn-info' onClick={()=>{\n                       history.push(`memes/${meme._id}`)\n                     }}>Info</button>\n                     {meme.author === username? <button data-id={meme._id} onClick={clickToDeleteMeme} style={{padding:\"6px\",marginLeft:\"6px\"}} className='btn btn-danger'>Delete</button>:null} \n                </div>\n              </div>\n            </div>\n          ))\n        : null}\n\n\n\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  memesData: state.memes.memesData,\n  isLoading: state.memes.isLoading,\n  username: state.auth.username,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchMemes: () => dispatch(fetchMemes()),\n  upvoteMeme: (e) => dispatch(upvoteMeme(e)),\n  downvoteMeme: (e) => dispatch(downvoteMeme(e)),\n  checkAuth: (e) => dispatch(checkAuth(e)),\n  deleteMeme: meme_id => dispatch(deleteMeme(meme_id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemeCards);\n","import axios from \"axios\";\nimport { Cookies } from \"react-cookie\";\nexport const POST_MEME = \"POST_MEME\";\nexport const newMeme = () => ({\n  type: POST_MEME,\n});\n\nexport const postMeme = (e) => (dispatch) => {\n  const form_data = new FormData(e.target);\n  const cookie = new Cookies();\n  const token = cookie.get(\"token\");\n  axios\n    .post(\"/memes\", form_data, {\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n    .then(() => dispatch(newMeme));\n};\n","import React, { useEffect, Fragment } from \"react\";\nimport \"../stylesheet/postmeme.css\";\nimport { useHistory, Redirect } from \"react-router-dom\";\nimport { postMeme } from \"../actions/postMeme\";\nimport { connect } from \"react-redux\";\nimport { checkAuth } from \"../actions/auth\";\nimport { Cookies } from \"react-cookie\";\n\n\nconst PostMeme = ({ postMeme, isPosted, isLogged, username, checkAuth }) => {\n  //Check if logged\n  let cookie = new Cookies();\n  useEffect(() => checkAuth(cookie.get(\"token\")), [cookie, checkAuth]);\n  const history = useHistory();\n  const onSubmit = (event) => {\n    event.preventDefault();\n    // dispatch(postMeme(event));\n    postMeme(event);\n    history.push(\"/\");\n  };\n\n  return (\n    <div id='post_meme_form'>\n      {!isLogged ? (\n        <Fragment>\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { error: \"Please sign in before posting memes\", remind_to_login: true },\n            }}\n          />\n        </Fragment>\n      ) : (\n        <Fragment>\n      <h3>POST MEME</h3>\n          <form  onSubmit={onSubmit}>\n            <input className=\"d-block\" placeholder=\"Name\" name=\"name\" />\n            <input className=\"d-block\" placeholder=\"Meme URL\" name=\"image\" />\n            <textarea\n              className=\"d-block\"\n              placeholder=\"Description\"\n              name=\"description\"\n            />\n            <button className=\"btn btn-primary\">Submit</button>\n          </form>\n        </Fragment>\n      )}\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  isLogged: state.auth.isLogged_Main,\n  username: state.auth.username,\n});\n\nconst mapDispatchtoProps = (dispatch) => ({\n  postMeme: (e) => dispatch(postMeme(e)),\n  checkAuth: (e) => dispatch(checkAuth(e)),\n});\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(PostMeme);\n","import React, { useEffect, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n// import {checkAuth} from '../actions/auth'\nimport { checkAuth, notlogged } from \"../actions/auth\";\nimport { connect } from \"react-redux\";\nimport { Cookies } from \"react-cookie\";\n\nconst Profile = ({ dispatch, isLogged, username }) => {\n  let cookie = new Cookies();\n  useEffect(() => dispatch(checkAuth(cookie.get(\"token\"))), [dispatch, cookie]);\n  //Click to sign out\n  const onClick = () => {\n    cookie.remove(\"token\", { path: \"/\" });\n    dispatch(notlogged);\n    window.location.reload();\n  };\n  //\n  return (\n    <div id=\"user_buttons\">\n      {!isLogged ? (\n        <Fragment>\n          <Link to=\"/register\">\n            <button className=\"btn btn-danger\">Register</button>\n          </Link>\n          <Link to=\"/login\">\n            <button className=\"btn btn-success\">Login</button>\n          </Link>\n        </Fragment>\n      ) : (\n        <Fragment>\n                    <button className=\"btn btn-warning\" onClick={onClick}>\n            Logout\n          </button>\n          <span>Hello, {username}</span>\n\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isLogged: state.auth.isLogged_Main,\n  username: state.auth.username,\n});\n\nexport default connect(mapStateToProps)(Profile);\n","import axios from \"axios\";\nimport { Cookies } from \"react-cookie\";\nexport const LOGGEDIN = \"LOGGEDIN\";\nexport const NOT_LOGGEDIN = \"NOT_LOGGEDIN\";\n\nconst loggin_type = (arg) => ({\n  type: LOGGEDIN,\n  payload: arg,\n});\nconst not_logged = (arg) => ({\n  type: NOT_LOGGEDIN,\n  payload: arg,\n});\n\nexport const log_in = () => (dispatch) => {\n  axios\n    .post(\"/user/login\", {\n      email: document.getElementById(\"email\").value,\n      password: document.getElementById(\"password\").value,\n    })\n    .then((res) => {\n      let cookie = new Cookies();\n      cookie.set(\"token\", res.data.token, { path: \"/\" });\n      dispatch(loggin_type(res.data.username));\n    //   return new Promise((reslove, reject)=>{\n    //     let cookie = new Cookies();\n    //     cookie.set(\"token\", res.data.token, { path: \"/\" });\n    //     dispatch(loggin_type(res.data.username));\n    //     reslove(true)\n    //   })\n    })\n    .catch((err) => {\n      if (err) {\n        dispatch(not_logged());\n      }\n    });\n};\n","import React, { useEffect, Fragment } from \"react\";\nimport { log_in } from \"../actions/login\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { useLocation, Link } from \"react-router-dom\";\n\nconst LoginForm = ({ dispatch, isLoggedin, user, attempt }) => {\n  const location = useLocation();\n\n  let history = useHistory();\n\n  //Handle success/fail login\n  useEffect(() => {\n    if (isLoggedin) {\n      // history.push(\"/\");\n      history.goBack()\n    } else {\n      if (attempt) {\n        history.push({\n          pathname: \"/login\",\n        });\n      }\n    }\n  }, [isLoggedin, attempt,history]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    dispatch(log_in());\n  };\n  return (\n    <div id=\"login_form\">\n      {/* Notify to login before post */}\n      {location.state && location.state.remind_to_login ? (\n        <p style={{ color: \"red\", fontStyle: \"italic\" }}>\n          {location.state.error}\n        </p>\n      ) : null}\n\n      {/* Wrong credential */}\n      {attempt ? (\n        <Fragment>\n          <p style={{ color: \"red\", fontStyle: \"italic\" }}>\n          Incorrect password/email\n          </p>{\" \"}\n        </Fragment>\n      ) : null}\n      <h3 style={{ textAlign: \"center\" }}>Login</h3>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"email\">Email: </label>\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\n        <label htmlFor=\"password\">Passowrd: </label>\n        <input id=\"password\" name=\"password\" placeholder=\"Password\" />\n        <Link to=\"/register\">\n          <p>Don't have an account yet?</p>\n        </Link>\n        <button className=\"btn btn-primary\">Submit</button>\n      </form>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  isLoggedin: state.login.isLogged,\n  user: state.login.user,\n  attempt: state.login.attempt,\n});\n\nexport default connect(mapStateToProps)(LoginForm);\n","import axios from 'axios'\n\nexport const REGISTERED = 'REGISTERED'\nexport const NOT_REGISTER = 'NOT_REGISTER'\n\nexport const register_type = (user) => ({\n    type: REGISTERED,\n    payload: user\n})\nexport const not_register_type = () =>({\n    type: NOT_REGISTER\n})\n\nexport const register = () => dispatch => {\n    axios.post('/user/register', {\n        username: document.getElementById('username').value,\n        email: document.getElementById('email').value,\n        password: document.getElementById('password').value\n    })\n    .then(result => dispatch(register_type(result.data) ))\n}","import React from \"react\";\nimport { register } from \"../actions/register\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nconst RegisterForm = ({ dispatch, isRegistered, user }) => {\n  let history = useHistory();\n  const onSubmit = (event) => {\n    event.preventDefault();\n    dispatch(register());\n    history.push(\"/\");\n  };\n  return (\n    <div id=\"register_form\">\n      <h3>Register</h3>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"username\">Username</label>\n        <input id=\"username\" name=\"username\" placeholder=\"Username\" />\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\n        <label htmlFor=\"password\">Passowrd</label>\n        <input id=\"password\" name=\"password\" placeholder=\"Password\" />\n        <Link to=\"/login\">\n          <p>Already have an account?</p>\n        </Link>\n\n        <button className=\"btn btn-primary\">Submit</button>\n      </form>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  isRegistered: state.register.isRegistered,\n  user: state.register.user,\n});\nexport default connect(mapStateToProps)(RegisterForm);\n","import axios from \"axios\";\nimport { Cookies } from \"react-cookie\";\nexport const SUCCESS_COMMENT = \"SUCCESS_COMMENT\";\nexport const FALIURE_COMMENT_LOGIN_NEED = \"FALIURE_COMMENT_LOGIN_NEED\";\n\nexport const comment_success = () => ({\n  type: SUCCESS_COMMENT,\n});\n\nexport const comment_failure = (error) => ({\n  type: FALIURE_COMMENT_LOGIN_NEED,\n  payload: error,\n});\n\nexport const post_comment = (comment, id) => (dispatch) => {\n  const cookie = new Cookies();\n  const token = cookie.get(\"token\");\n  axios\n    .post(\n      `/memes/${id}/comments`,\n      { comment: comment },\n      {\n        headers: {\n          Authorization: \"Bearer \" + token,\n        },\n      }\n    )\n    .then((res) => dispatch(comment_success()))\n    .catch((err) => dispatch(comment_failure(err.message)));\n};\n","import axios from 'axios'\nimport { Cookies } from \"react-cookie\";\n\nexport const COMMENT_DELETE = 'COMMENT_DELETE'\nexport const COMMENT_DELETE_ERROR = 'COMMENT_DELETE_ERROR'\n\nexport const delete_comment_type = {\n    type: COMMENT_DELETE\n}\nexport const not_delete_comment_type = {\n    type: COMMENT_DELETE_ERROR\n}\n\nexport const delete_comment = (meme_id,comment_id) => dispacth => {\n  const cookie = new Cookies();\n  const token = cookie.get(\"token\");\n\n    axios.delete(`/memes/${meme_id}/comments/${comment_id}`, {\n        headers: {\n            Authorization: \"Bearer \" + token,\n        }\n    })\n    .then(res => dispacth(delete_comment_type))\n    .catch(err => {\n        if(err)\n        dispacth(not_delete_comment_type)\n    })\n}","import React, { useEffect, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchMemes } from \"../actions/fetchMemes\";\nimport { post_comment } from \"../actions/comment\";\nimport { checkAuth } from \"../actions/auth\";\nimport { delete_comment } from \"../actions/deleteComment\";\n\nconst onClick = (e) => {\n  if (e.target.firstElementChild) {\n    e.target.firstElementChild.style.display = \"initial\";\n    e.target.firstElementChild.focus();\n  }\n};\n//SMART TRICKS - USE ONBLUR TO CLOSE MODALS\nconst onBlur = () => {\n  let length = document.getElementsByClassName(\"comment_delete_modal\").length;\n  for (let i = 0; i < length; i++) {\n    document.getElementsByClassName(\"comment_delete_modal\")[i].style.display =\n      \"none\";\n  }\n};\n\nconst MemeDetail = ({\n  memesData,\n  fetchMemes,\n  username,\n  match,\n  postComment,\n  posted,\n  failure,\n  error_msg,\n  deleteComment,\n  comment_deleted,\n}) => {\n  useEffect(() => {\n    fetchMemes();\n  }, [memesData, fetchMemes]);\n\n  //HOOK to Display ERROR\n  useEffect(() => {\n    if (failure) {\n      document.getElementById(\"comment_error\").innerText = error_msg;\n    }\n    if (username != null && failure)\n      document.getElementById(\"comment_error\").innerText = \"\";\n\n    if (posted) window.location.reload();\n  }, [failure, posted, username]);\n\n  const submitComment = () => {\n    const comment = document.getElementById(\"comment_text\").value;\n    postComment(comment, match.params.id);\n  };\n\n  //DELETE COMMENT\n  const clickToDelteComment = e => {\n    const comment_id = e.target.getAttribute('data-commentid');\n    const meme_id = e.target.getAttribute('data-memeid');\n    deleteComment(meme_id,comment_id);\n  }\n\n  return (\n    <div id=\"meme_detail\">\n      {memesData.map((meme, index) => {\n        if (meme._id.toString() === match.params.id) {\n          return (\n            <Fragment key={index}>\n              <div className=\"col-12 col-sm-8 offset-sm-2\">\n                <div className=\"card\">\n                  <div className=\"card-header\">\n                    <h4>{meme.name}</h4>\n                  </div>\n                  <img alt=\"meme\" key={index} src={meme.image} />\n                  <div className=\"card-body\">\n                    <p style={{ fontStyle: \"italic\" }}>\n                      Description: &nbsp;\n                      {meme.description}\n                    </p>\n                    <p style={{ fontStyle: \"italic\" }}>\n                      Uploader: &nbsp;\n                      {meme.author}\n                    </p>\n                    <p style={{ fontStyle: \"italic\" }}>\n                      Date: &nbsp;\n                      {meme.date.slice(0, 10)}{\" \"}\n                    </p>\n                  </div>\n\n                  <div className=\"card-body\" id=\"comment_section\">\n                    <textarea\n                      id=\"comment_text\"\n                      onChange={() => {\n                        document.getElementById(\n                          \"comment_button\"\n                        ).style.display = \"initial\";\n                      }}\n                      placeholder=\"..Comment\"\n                    ></textarea>{\" \"}\n                    <p\n                      id=\"comment_error\"\n                      style={{ color: \"red\", fontStyle: \"italic\" }}\n                    ></p>\n                    <input\n                      type=\"button\"\n                      value=\"Submit\"\n                      id=\"comment_button\"\n                      onClick={submitComment}\n                    />\n                    {meme.comments.map((comment, index) => {\n                      return (\n                        <p key={index}>\n                          <span id=\"commenters\">{comment.commenter}</span>{\" \"}\n                          <br /> {/* Delete comment */}\n                          {/* Conditional render DELETE BUTTON */}\n                          {comment.commenter === username ? <Fragment>\n                            <span onClick={onClick} style={{ float: \"right\" }}>\n                            &#215;\n                            <span\n                              tabIndex=\"0\"\n                              onBlur={onBlur}\n                              className=\"comment_delete_modal\"\n                              data-commentid={comment._id}\n                              data-memeid = {meme._id}\n                              onClick={clickToDelteComment}\n                            >\n                              Delete\n                            </span>\n                          </span>\n                          </Fragment>: null}\n                        \n                          <span style={{ fontSize: \"0.75rem\" }}>\n                            &#x1F550; { comment.date.slice(0, 10)}\n                          </span>\n                          <br />\n                          {comment.content}\n                        </p>\n                      );\n                    })}         \n                  </div>\n\n                </div>\n              </div>\n            </Fragment>\n          );\n        }\n      })}\n\n      {/* Comment Delete Confirmation */}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  memesData: state.memes.memesData,\n  isLoading: state.memes.isLoading,\n  username: state.auth.username,\n  posted: state.comment.posted,\n  failure: state.comment.failure,\n  error_msg: state.comment.error_msg,\n  comment_deleted: state.comment_deletion.comment_deleted,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchMemes: () => dispatch(fetchMemes()),\n  checkAuth: (e) => dispatch(checkAuth(e)),\n  postComment: (comment, id) => dispatch(post_comment(comment, id)),\n  deleteComment: (meme_id, comment_id) =>\n    dispatch(delete_comment(meme_id, comment_id)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(MemeDetail);\n","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport MemeCards from \"./components/MemeCards\";\nimport PostMeme from \"./components/PostMeme\";\nimport Profile from \"./components/Profile\";\nimport LoginForm from \"./components/LoginForm\";\nimport RegisterForm from \"./components/RegisterForm\";\nimport MemeDetail from \"./components/MemeDetail\";\n\nclass App extends Component {\n  //Close modal\n  exitButton = () => {\n    document.getElementById(\"contact-form\").style.display = \"none\";\n  };\n  hiddenForm = () => {\n    document.getElementById(\"contact-form\").style.display = \"none\";\n    window.location.reload();\n  };\n  render() {\n    return (\n      <div>\n         <Profile />\n        <div className=\"jumbotron\">\n\n          <a href=\"/\">\n            <img alt=\"LOGO\" src=\"logo.png\" />\n          </a>\n        </div>\n        <div style={{ display:\"flex\", flexDirection:\"row-reverse\"}}>\n            <Link to=\"/postmeme\">\n              <button className=\"btn btn-success\" id=\"addButton\">\n                + Add meme\n              </button>\n            </Link>\n          </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <Switch>\n              <Route path=\"/register\" component={RegisterForm}></Route>\n              <Route path=\"/login\" component={LoginForm}></Route>\n              <Route path=\"/postmeme\" component={PostMeme}></Route>\n              <Route exact path=\"/memes/:id\" component={MemeDetail}></Route>\n            </Switch>\n          </div>\n          <div className=\"row\" style={{ display: \"inherit\" }}>\n            <div className=\"card-deck\">\n              <Switch>\n                <Route exact path=\"/\" component={MemeCards}></Route>\n              </Switch>\n            </div>\n          </div>\n        </div>\n\n        <div style={{borderTop:\"1px solid #0000001a\", textAlign:\"center\"}}>\n        &copy;\t2020 Copyright - Barney Shi\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actions from \"../actions/fetchMemes\";\n\nconst initialState = {\n  memesData: [],\n  isLoading: true,\n};\n\nconst fetchMemesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.GET_MEMES:\n      return { ...state, isLoading: false, memesData: action.payload };\n    default:\n      return state;\n  }\n};\nexport default fetchMemesReducer;\n","import * as actions from \"../actions/postMeme\";\n\nconst initialState = {\n  isPosted: false\n};\n\nconst postMemeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.POST_MEME:\n      return { ...state, isPosted: true};\n    default:\n      return state;\n  }\n};\nexport default postMemeReducer;\n","import * as actions from \"../actions/upvote\";\n\nconst initialState = {\n  isUpvoted: false,\n  upVotes: 0\n};\n\nconst upvoteReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.UPVOTE:\n      return { ...state, isUpvoted: true, upVotes:action.payload };\n    default:\n      return state;\n  }\n};\nexport default upvoteReducer;","import * as actions from \"../actions/downvote\";\n\nconst initialState = {\n  isDownvoted: false,\n  downVotes: 0\n};\n\nconst downvoteReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.DOWNVOTE:\n      return { ...state, isDownvoted: true };\n    default:\n      return state;\n  }\n};\nexport default downvoteReducer;\n","import * as actions from \"../actions/auth\";\n\nconst initialState = {\n  isLogged_Main: false,\n  username: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.LOGGEDIN:\n      return { isLogged_Main: true, username: action.payload };\n    case actions.NOTLOGGEDIN:\n        return {isLogged_Main: false, user: null}\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","import * as actions from \"../actions/register\";\n\nconst initialState = {\n  isRegistered: false,\n  user: null,\n};\n\nconst RegisterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.REGISTERED:\n      return { isRegistered: true, user: action.payload };\n    case actions.NOT_REGISTER:\n      return { isRegistered: false };\n    default:\n      return state;\n  }\n};\nexport default RegisterReducer;\n","import * as actions from \"../actions/login\";\n\nconst initialState = {\n  isLogged: false,\n  username: [],\n  attempt: false\n};\n\nconst LoginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.LOGGEDIN:\n      return { isLogged: true};\n    case actions.NOT_LOGGEDIN:\n      return {isLogged: false, username: null,attempt: true};\n    default:\n      return state;\n  }\n};\nexport default LoginReducer;\n","import * as actions from \"../actions/comment\";\n\nconst initialState = {\n  posted: false,\n  failure: false,\n  error_msg: \"\",\n};\n\nconst CommentReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.SUCCESS_COMMENT:\n      return {posted: true, failure: false, error_msg:'123' };\n    case actions.FALIURE_COMMENT_LOGIN_NEED:\n      return { ...state, failure: true,posted:false,error_msg:'Please sign in to comment' };\n    default:\n      return state;\n  }\n};\nexport default CommentReducer;\n","import * as actions from \"../actions/deleteComment\";\n\nconst initialState = {\n  comment_deleted: false,\n};\n\nconst DeleteCommentReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.COMMENT_DELETE:\n      return { comment_deleted: true };\n    case actions.COMMENT_DELETE_ERROR:\n      return { comment_deleted: false };\n    default:\n      return state;\n  }\n};\n\nexport default DeleteCommentReducer;\n","import * as actions from \"../actions/deleteMeme\";\n\nconst initialState = {\n  meme_deleted: false,\n};\n\nconst MemeDeletionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.MEME_DELETED:\n      return { meme_deleted: true };\n    case actions.MEME_NOT_DELETED:\n      return { meme_deleted: false };\n    default:\n      return state;\n  }\n};\nexport default MemeDeletionReducer\n","import {combineReducers} from 'redux'\n\nimport fetchMemesReducer from './fetchMemesReducer'\nimport postMemeReducer from './postMemeReducer'\nimport upvoteReducer from './upvoteReducer'\nimport downvoteReducer from './downvoteReducer'\nimport authReducer from './authReducer'\nimport RegisterReducer from './RegisterReducer'\nimport LoginReducer from './LoginReducer'\nimport CommentReducer from './CommentReducer'\nimport DeleteCommentReducer from './DeleteCommentReducer'\nimport MemeDeletionReducer from './MemeDeletionReducer'\n\nconst rootReducer = combineReducers({\n    memes: fetchMemesReducer,\n    postmeme: postMemeReducer,\n    upvotememe: upvoteReducer,\n    downvotememe: downvoteReducer,\n    auth: authReducer,\n    register: RegisterReducer,\n    login: LoginReducer,\n    comment: CommentReducer,\n    comment_deletion: DeleteCommentReducer,\n    meme_deletion: MemeDeletionReducer\n})\n\nexport default rootReducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers'\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter >\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}